alias mysql=/usr/local/mysql/bin/mysql
// 账户登录
mysql -u root -p
// 授权远程登录
grant all privileges on *.* to '用户名'@'%' identified by '登录密码' with grant option;
flush privileges;

数据定义语言：简称DDL(Data Definition Language):用来定义数据库对象：数据库，表，列等。关键字：create，alter，drop等
数据操作语言：简称DML(Data Manipulation Language)，用来对数据库中表的记录进行更新。关键字：insert，delete，update等
数据控制语言：简称DCL(Data Control Language)，用来定义数据库的访问权限和安全级别，及创建用户；关键字：grant等
数据查询语言：简称DQL(Data Query Language)，用来查询数据库中表的记录。关键字：select，from，where等

show databases;
// 创建数据库
CREATE DATABASE databaseName (character set utf-8);
// 实用数据库
use databaseName;
// 查看正在使用的数据库
select database();
// 数据类型
整数: tinyint, smallint, mediumint, int 
小数: float, double, decimal 严格定义浮点
日期: year, time, date, datetime(实际项目时间类型), timestamp
文本: char, varchar(实际项目主键类型, 非int), text, 
// 约束
primary key, unique, not null， auto_increment
// 查看表定义
DESC person;
// 查看、删除、创建表
show tables;
drop table name;
CREATE TABLE person
(
    person_id SMALLINT UNSIGNED, # smallint unsigned
    fname VARCHAR(20),
    lname VARCHAR(20),
    gender ENUM('M', 'F') NOT NULL, 
    birth_date DATE,
    street VARCHAR(20),
    state VARCHAR(20),
    country VARCHAR(20),
    postal_code VARCHAR(20),
    // unique(lname) 唯一约束 
    CONSTRAINT pk_person PRIMARY KEY (person_id) // #命名pk_person约束:主键约束
);

// 创建favorite_food表
create table favorite_food
(
    person_id smallint unsigned, 
    food varchar(20),
    constraint pk_favorite_food primary key (person_id, food),
    constraint fk_fav_food_person_id foreign key (person_id)
    references person (person_id) // 外键约束的person_id来自person表的person_id
);

// 改变表的属性
alter table 表名 add 列名 类型(长度) 约束; 		--修改表添加列. 
alter table 表名 modify 列名 类型(长度) 约束;	--修改表修改列的类型长度及约束.
alter table 表名 change 旧列名 新列名 类型(长度) 约束;	--修改表修改列名.
alter table 表名 drop 列名;					--修改表删除列.
rename table 表名 to 新表名;					--修改表名
alter table 表名 character set 字符集;		--修改表的字符集

// 插入数据
INSERT INTO person (lineName1, lineName2)
VALUES (value1, value2);
insert into 表 (列名1,列名2,列名3..) values select (列名1,列名2,列名3..) from 表
insert into 表 values select * from 表

// 比较运算符
between 5 and 10; in (1,2,3); is null
like 'a_' :% 代表零个或多个任意字符，_ 代表一个字符
// 逻辑运算符
and, or, not

// 查询
SELECT food as otherName
FROM favorite_food
WHERE person_id = 1
ORDER BY food
//删除
DELECT FROM department d
WHERE NOT EXIST (SELECT 1 
        FROM employee e
        WHERE e.dept_id = d.dept_id) 

truncate table 表名 // 删除表并将auto_increment置为0
// 更新
UPDATE person
SET street='1225 Tremont ST.',
    city = 'Boston'
WHERE person_id = 1;

// 显式日期转换
UPDATE person
SET birth_date = str_to_date('DEC-21-1980', '%b-%d-%Y')
WHERE person_id=1

// 连接: A join B on condition
// 外连接：cross join
隐式: select * from A,B;
显示：select * from A cross join B;
// inner join
隐式：select * from A, B where A.id = B.id;
显示：select * from A inner join B on A.id = B.id;
// 外连接: left join, right join, (mysql 不支持full join)
select * from A left join B on A.id = B.id;

// 去除重复cust_id
SELECT DISTINCT cust_id
FROM account

// 子表 select line from (select line2 from A, B), C
SELECT e.emp_id, e.fname, e.lname
FROM (SELECT emp_id, fname, laname, start_date, title FROM employee) e;

// 按d.name先分组(group by)
SELECT d.name, count(e.emp_id) num_employees
FROM department d INNER JOIN employee e
ON d.dept_id = e.dept_id
GROUP BY d.name
HAVING count(e.emp_id) > 2

// 根据fed_id最后3位数字排序, left join保留左表
SELECT cust_id, cust_type_cd, city, state, fed_id
FROM customer
ORDER BY RIGHT(fed_id, 3); LEFT // ORDER BY 2, 5 //根据第二和第5列排序
order by lineName desc // 降序
// 聚合函数sum(), avg(), max(), min(), count()
select cid, count(*) from product group by cid;

// 成员条件
SELECT account_id, product_cd, cust_id, avail_balance
FROM account
WHERE product_cd IN ('1test', '2t', '3')

// 通配符
F%  以F打头的字符串
%t  以t结尾的字符串
%bas%  包含'bas'字符串的字符串
__t_ 包含4个字符，且第三个为t的字符串
// 通配符使用
SELECT laname
FROM employee
WHERE lname LIKE '_a%e%'

// 正则表达式
SELECT emp_id, fname, lname
FROM employee
WHERE lname REGEXP '^[FG]';

// NULL 表达式用IS // 错误：==NULL
SELECT emp_id, fname, lanme, superior_rmp_id
FROM employee
WHERE superior_emp_id IS NOT NULL;

// 多表链接(以特定顺序: mysql的STRAIGHT_JOIN)
SELECT STRAIGHT_JOIN a.account_id, c.fed_id, e.fname
FROM customer c INNER JOIN account a
    ON a.cust_id = c.cust_id
    INNER JOIN employee emp_id
    ON a.open_emp_id = e.emp_id
WHERE c.cust_type_cd = 'B';

// 将子查询结果作为查询表
SELECT a.account_id, a.cust_id, a.open_date, a.product_cd
FROM account a INNER JOIN  
    (SELECT emp_id, assigned_branch_id
        FROM employee
        WHERE start_date < '2007-01-01'
        AND (title = 'Teller' OR title = 'Head Teller')) e
        ON a.open_emp_id = e.emp_id
        INNER JOIN
        (SELECT branch_id
        WHERE name = 'Woburn Branch') b
        ON e.assigned_branch_id = b.branch_id;

// 去除集合重复项
// SELECT val1 key1, val2 key2
SELECT 1 num, 'abc' str
UNION 去除重复项 // UNION ALL 保留重复项
SELECT 9 num, 'xyz' str

// 去除选择的重复项
SELECT DISTINCT emp_id
FROM account
WHERE open_branch_id = 2;

// 统计每个id下有多少个账号
SELECT open_emp_id, COUNT(*) number // (*)每组存在的行数
ACCOUNT account
GROUP BY open_emp_id;
HAVING COUNT(*) > 4 //condition: 数量大于4的账户

// 统计不同open_emp_id的个数
SELECT COUNT(DISTINCT open_emp_id)
FROM account

SELECT MAX(pending_balance - avail_balance) max_uncleared
FROM account;

// 多列分组
SELECT product_cd, open_branch_id,
SUM(avail_balance) hot_balance
FROM account
GROUP BY product_cd, open_branch_id; // 绑定两个笛卡尔乘积

// 根据职员入职年份对职员进行分组
SELECT EXTRACT(YEAR FROM start_date) year, COUNT(*) how_many
FROM employee
GROUP BY EXTRACT(YEAR FROM start_date);

//过滤分组
SELECT product_cd, SUM(avail_balance) prod_balance
FROM account
WHERE status = 'active' // 过滤status='active'
GROUP BY product_cd
HAVING SUM(avail_balance) >= 10000

// 选取每科最高分
SELECT subject, max(score) scores
FROM table
GROUP BY subject
HAVING score > 60
ORDER BY subject_id;

// 查找雇员id与任何主管id不同的雇员
SELECT emp_id, fname, lname, title
FROM employee
WHERE emp_id != ALL (SELECT superior_emp_id // ALL emp_id与集合每行row比较
                    FROM employee 
                    WHERE superior_emp_id IS NOT NULL) // NOT IN (1, 2, NULL)

// 查找有两个账户的客户
SELECT c.cust_id, c.cust_type_cd, c.city
FROM customer c, city
WHERE 2 = (SELECT COUNT(*)
    FROM ACCOUNT a
    WHERE a.cust_id = c.cust_id);

// 外链接
SELECT a.account_id, a.cust_id, b.name
FROM account a LEFT OUTER JOIN bussiness b // 没有匹配b.cust_id的行，b.name为NULL
ON a.cust_id = b.cust_id;

// 条件逻辑 P195
SELECT c.cust_id, c.fed_id,
    CASE
        WHEN c.cust_type_cd = 'I'
            THEN CONCAT(i.fname, '', i.lname)
        WHEN c.cust_type_cd = 'B'
            THEN b.name
        ELSE 'unknow'
    END name
FROM customer c LEFT OUTER JOIN individual individual
    ON c.cust_id = i.cust_id
    LEFT OUTER JOIN business bas
    ON c.cust_id = b.cust_id;

// 以A开头的name
SELECT dept_id, name
FROM department
WHERE name LIKE 'A%';

 // 修改前10条信息: limit:尽量少用
 UPDATE account
 SET avail_balamce = avail_balance + 100
 WHERE product_cd IN ('CHK', 'SAV', 'MM')
 ORDER BY open_date ASC
 LIMIT 10; // 即0, 10
 limit 5, 10 // 从索引(不包括)5开始，查询10条

 // 多表删除(比单表多了链接)
 DELETE account2, customer2, individual2
 FROM account2 INNER JOIN customer2
    ON account2.cust_id = customer2.cust_id
    INNER JOIN individual2
    ON customer2.cust_id = individual2.cust_id
WHERE individual2.cust_id = 1;

// 执行顺序
SELECT * FROM user LEFT JOIN order ON user.id = order.uid WHERE order.price > 1000 GROUP BY user.name HAVING count(1) > 5 ORDER BY user.name LIMIT 0,10
1.	FROM（将最近的两张表，进行笛卡尔积）---VT1
2.	ON（将VT1按照它的条件进行过滤）---VT2
3.	LEFT JOIN（保留左表的记录）---VT3
4.	WHERE（过滤VT3中的记录）--VT4…VTn
5.	GROUP BY（对VT4的记录进行分组）---VT5
6.	HAVING（对VT5中的记录进行过滤）---VT6
7.	SELECT（对VT6中的记录，选取指定的列）--VT7
8.	ORDER BY（对VT7的记录进行排序）--游标
9.	LIMIT（对排序之后的值进行分页）
